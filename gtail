#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import signal
import select
import fcntl
import gtk
import gobject
import pango
import gettext
_ = gettext.gettext
import threading
gtk.threads_init()
import argparse
import time
import glib



class TailThread(threading.Thread):
	def __init__(self, filenames, tail_opts=[]):
		threading.Thread.__init__(self)
		self.filenames = filenames
		self.tail_opts = tail_opts
		self.tail_pid = None
		self.fork_event = threading.Event()
		self.exiting = False
	def kill(self):
		if self.tail_pid is None:
			self.fork_event.wait()
		if self.tail_pid is not None:
			self.exiting = True
			try:
				os.kill(self.tail_pid, signal.SIGINT)
			except OSError:
				pass
	def pause(self):
		if self.tail_pid is None:
			self.fork_event.wait()
		try:
			os.kill(self.tail_pid, signal.SIGSTOP)
		except OSError, e:
			if e.errno != 3:
				raise
	def unpause(self):
		if self.tail_pid is None:
			self.fork_event.wait()
		try:
			os.kill(self.tail_pid, signal.SIGCONT)
		except OSError, e:
			display_error(e)
			self.tail_pid = None
	def run(self):
		gtk.threads_enter()
		n_lines = spin.get_text()
		gtk.threads_leave()
	
		pipe_read, pipe_write = os.pipe()
		pipe_read = os.fdopen(pipe_read, 'r')
		pipe_write = os.fdopen(pipe_write, 'w')
		pid = os.fork()
		if pid == 0:
			pipe_read.close()
			os.dup2(pipe_write.fileno(), sys.stdout.fileno())
			#os.dup2(pipe_write.fileno(), sys.stderr.fileno())
			try:
				#sys.stderr.write(">> tail -f -F -n %s %s\n" % (n_lines, self.filename))
				os.execvp('tail', ['-f', '-F', '-n', n_lines] + self.tail_opts + self.filenames)
			except OSError, exc:
				pass
			os._exit(127)
		else:
			self.tail_pid = pid
			self.fork_event.set()
			pipe_write.close()
			gtk.threads_enter()
			textbuffer.set_text('')
			btn_conn.set_active(True)
			set_tooltip_btn_conn()
			gtk.threads_leave()
			
			info = {}
			while waitpid_but_running(pid, info):
				inputs = [pipe_read]
				outputs = []
				set_blocking(pipe_read, True)
				time.sleep(0.5)
				readable, writable, exceptional = select.select(inputs, outputs, inputs, None)
				if pipe_read in readable:
					set_blocking(pipe_read, False)
					gtk.threads_enter()
					text_append = ''
					n=0
					while True:
						try:
							line = pipe_read.readline()
							if line == '': break
						except IOError, exc:
							if exc.errno == 11: break
							else: self.kill()
						text_append += line
						n+=1
					textbuffer.insert(textbuffer.get_end_iter(), text_append)
					limit_lines()
					gtk.threads_leave()
			pipe_read.close()
			if not self.exiting:
				gtk.threads_enter()
				display_error("tail exited with code "+str(info['code'])+(",\nkilled by signal "+signame(info['signal']) if info['signal'] else '')+".")
				gtk.threads_leave()
		return

def waitpid_but_running(except_pid, info):
	pid, status = os.waitpid(except_pid, os.WNOHANG)
	if pid == except_pid:
		info['signal'] = status & 0xFF
		info['code'] = status >> 8
		return False
	return True

def signame(n):
	for name, num in signal.__dict__.iteritems():
		if name.startswith('SIG') and num == n:
			return name

def set_blocking(fd, on):
	fl = fcntl.fcntl(fd, fcntl.F_GETFL)
	if on:
		mask = fl & ~os.O_NONBLOCK
	else:
		mask = fl | os.O_NONBLOCK
	fcntl.fcntl(fd, fcntl.F_SETFL, mask)

def main_win_show(widget, event):
	win.disconnect(start_evt)
	start_tail_thread()
	win_set_title()

def add_key_binding(widget, keyname, callback):
	accelgroup = gtk.AccelGroup()
	key, modifier = gtk.accelerator_parse(keyname)
	accelgroup.connect_group(key, modifier, gtk.ACCEL_VISIBLE, callback)
	widget.add_accel_group(accelgroup)

def stop_tail_thread():
	if Global['Thread'] is not None:
		gtk.threads_leave()
		Global['Thread'].kill()
		Global['Thread'].join()
		gtk.threads_enter()

def start_tail_thread(wdg=None):
	stop_tail_thread()
	tail_opts = []
	for opt in 'bytes', 'pid', 'quiet', 'retry', 'verbose':
		val = getattr(Args, opt)
		if val:
			tail_opts.append('--'+opt)
			if val is not True:
				tail_opts.append(str(val))
	Global['Thread'] = TailThread(Args.FILE, tail_opts)
	Global['Thread'].start()

def limit_lines(corrig=0):
	clns = textbuffer.get_line_count() + corrig
	rlns = int(spin.get_text())
	if clns > rlns:
		textbuffer.delete(textbuffer.get_start_iter(), textbuffer.get_iter_at_line(clns - rlns))

def lines_changed(wdg):
	limit_lines(-1)

def lines_changed_restart(wdg):
	timer = wdg.get_data('timer')
	if timer is not None:
		gobject.source_remove(timer)
	timer = gobject.timeout_add(1000, start_tail_thread)
	wdg.set_data('timer', timer)

def cb_connect(wdg):
	if wdg.get_active():
		Global['Thread'].unpause()
	else:
		Global['Thread'].pause()
	set_tooltip_btn_conn()

def set_tooltip_btn_conn():
	if btn_conn.get_active():
		btn_conn.set_stock_id(gtk.STOCK_CONNECT)
		btn_conn.set_tooltip_text(_("Pause"))
	else:
		btn_conn.set_stock_id(gtk.STOCK_DISCONNECT)
		btn_conn.set_tooltip_text(_("Updating"))

def scroll_down_conditional():
	if btn_auto.get_active():
		#textview.scroll_to_iter(textbuffer.get_end_iter(), 0)
		vadj = textview.get_vadjustment()
		vadj.set_value(vadj.upper)

def cb_follow(*ignore):
	scroll_down_conditional()

def toggle_follow(*ignore):
	btn_auto.set_active(not btn_auto.get_active())

def do_connect(*ignore):
	btn_conn.set_active(True)

def dont_connect(*ignore):
	btn_conn.set_active(False)

def line_inserted(*ignore):
	glib.idle_add(scroll_down_conditional, priority=glib.PRIORITY_HIGH_IDLE)

def display_error(e):
	text = None
	if isinstance(e, OSError) or isinstance(e, IOError):
		text = e.strerror + " (#" + str(e.errno) + ")\n" + str(e.filename)
	elif isinstance(e, Exception):
		text = e.message
	elif type(e) == type([]):
		text = ''.join(e)
	if text is None:
		text = str(e)
	dlg = gtk.MessageDialog(win, gtk.DIALOG_MODAL | gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_ERROR, gtk.BUTTONS_OK, text)
	dlg.run()
	dlg.destroy()

def open_new_file(*ignore):
	dialog = gtk.FileChooserDialog(_("Select a file"), None, gtk.FILE_CHOOSER_ACTION_OPEN, (gtk.STOCK_CANCEL, gtk.RESPONSE_CANCEL, gtk.STOCK_OPEN, gtk.RESPONSE_OK))
	dialog.set_action(gtk.FILE_CHOOSER_ACTION_OPEN)
	if len(Args.FILE) == 1:
		initdir = os.path.dirname(Args.FILE[0])
	else:
		initdir = os.getcwd()
	dialog.set_current_folder(initdir)
	response = dialog.run()
	if response == gtk.RESPONSE_OK:
		Args.FILE = [dialog.get_filename()]
		start_tail_thread()
		win_set_title()
	dialog.destroy()

def on_button_press(wdg, event, spec):
	if event.type == gtk.gdk.BUTTON_PRESS:
		for num, key in (1, 'left'), (2, 'middle'), (3, 'right'):
			if event.button == num and spec.has_key(key):
				func = spec[key][0]
				args = spec[key][1]
				func(wdg, *args)

def set_font_size_delta(wdg, delta):
	pt = Global['Font']['Size'] + delta
	if pt < 1: pt = 1
	set_font_size(wdg, pt)

def set_font_size(wdg, pt):
	Global['Font']['Size'] = pt
	fontdesc = pango.FontDescription('monospace %d' % Global['Font']['Size'])
	textview.modify_font(fontdesc)

def win_set_title():
	win.set_title('; '.join(Args.FILE))

def bye(*ignore):
	stop_tail_thread()
	gtk.main_quit()

def cb_lines_inc(*ignore):
	adjus.set_value(adjus.get_value()+1)
def cb_lines_dec(*ignore):
	adjus.set_value(adjus.get_value()-1)
def cb_font_enlarge(*ignore):
	set_font_size_delta(None, +1)
def cb_font_minify(*ignore):
	set_font_size_delta(None, -1)
def cb_font_default(*ignore):
	set_font_size(None, 12)



Global = {'Thread': None, 'Font': {'Size': 12,},}

argparser = argparse.ArgumentParser(epilog=_("See tail(1), `tail --helpÂ´"))
argparser.add_argument('-c', '--bytes', metavar='BYTES', type=int)
argparser.add_argument('-n', '--lines', metavar='LINES', type=int, default=10)
argparser.add_argument('--pid', metavar='PID', type=int)
argparser.add_argument('-q', '--quiet', '--silent', action='store_true')
argparser.add_argument('--retry', action='store_true')
argparser.add_argument('-v', '--verbose', action='store_true')
argparser.add_argument('FILE', nargs='*', help=_("File(s) to watch"))
Args = argparser.parse_args()
if len(Args.FILE) < 1:
	Args.FILE.append('/dev/stdin')



win = gtk.Window()
win.set_default_size(720, 350)
win.connect('delete-event', bye)
start_evt = win.connect('map-event', main_win_show)
add_key_binding(win, 'Escape', bye)
add_key_binding(win, '<Control>C', bye)
add_key_binding(win, '<Control>O', open_new_file)
add_key_binding(win, 'F', toggle_follow)
add_key_binding(win, '<Shift>F', toggle_follow)
add_key_binding(win, 'plus', cb_font_enlarge)
add_key_binding(win, 'minus', cb_font_minify)
add_key_binding(win, 'equal', cb_font_default)
add_key_binding(win, 'KP_Add', cb_font_enlarge)
add_key_binding(win, 'KP_Subtract', cb_font_minify)
add_key_binding(win, 'KP_Equal', cb_font_default)
add_key_binding(win, '<Control>S', dont_connect)
add_key_binding(win, '<Control>Q', do_connect)

frame = gtk.VBox()
toolbar = toolbar = gtk.Toolbar()
toolbar.set_style(gtk.TOOLBAR_ICONS)
scroll = gtk.ScrolledWindow()
scroll.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
textbuffer = gtk.TextBuffer()
textbuffer.connect('changed', line_inserted)
textview = gtk.TextView(textbuffer)
textview.set_editable(False)
set_font_size_delta(None, 0)

win.add(frame)
frame.pack_start(toolbar, False, True, 0)
frame.pack_start(scroll, True, True, 0)
scroll.add(textview)


btn_close = gtk.ToolButton(gtk.STOCK_CLOSE)
btn_close.set_tooltip_text(_("Close"))
btn_close.connect('clicked', bye)
toolbar.insert(btn_close, -1)
btn_open = gtk.ToolButton(gtk.STOCK_OPEN)
btn_open.set_tooltip_text(_("Open..."))
btn_open.connect('clicked', open_new_file)
toolbar.insert(btn_open, -1)
btn_conn = gtk.ToggleToolButton()
set_tooltip_btn_conn()
btn_conn.connect('toggled', cb_connect)
toolbar.insert(btn_conn, -1)
btn_auto = gtk.ToggleToolButton(gtk.STOCK_GOTO_BOTTOM)
btn_auto.set_active(True)
btn_auto.set_tooltip_text(_("Auto Scroll"))
btn_auto.connect('toggled', cb_follow)
toolbar.insert(btn_auto, -1)
toolbar.insert(gtk.SeparatorToolItem(), -1)
btn_size_plus = gtk.ToolButton(gtk.STOCK_ZOOM_IN)
btn_size_plus.set_tooltip_text(_("Bigger font"))
btn_size_plus.child.connect('button-press-event', on_button_press, {'left': (set_font_size_delta, [+1])})
toolbar.insert(btn_size_plus, -1)
btn_size_dflt = gtk.ToolButton(gtk.STOCK_ZOOM_100)
btn_size_dflt.set_tooltip_text(_("Default size"))
btn_size_dflt.child.connect('button-press-event', on_button_press, {'left': (set_font_size, [12])})
toolbar.insert(btn_size_dflt, -1)
btn_size_mins = gtk.ToolButton(gtk.STOCK_ZOOM_OUT)
btn_size_mins.set_tooltip_text(_("Smaller font"))
btn_size_mins.child.connect('button-press-event', on_button_press, {'left': (set_font_size_delta, [-1])})
toolbar.insert(btn_size_mins, -1)

ti_sep = gtk.SeparatorToolItem()
ti_sep.set_expand(True)
ti_sep.set_draw(False)
toolbar.insert(ti_sep, -1)

ti_label1 = gtk.ToolItem()
label1 = gtk.Label(_("Lines: "))
ti_label1.add(label1)
toolbar.insert(ti_label1, -1)

ti_spin = gtk.ToolItem()
adjus = gtk.Adjustment(value=Args.lines, lower=1, upper=9999, step_incr=1, page_incr=10)
spin = gtk.SpinButton(adjus)
spin.set_numeric(True)
spin.set_alignment(1)
spin.connect('value-changed', lines_changed)
ti_spin.add(spin)
toolbar.insert(ti_spin, -1)


win.show_all()
gtk.main()

